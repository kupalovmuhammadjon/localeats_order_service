// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.12.4
// source: dish.proto

package dish

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// DishClient is the client API for Dish service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type DishClient interface {
	CreateDish(ctx context.Context, in *ReqCreateDish, opts ...grpc.CallOption) (*DishInfo, error)
	UpdateDish(ctx context.Context, in *ReqUpdateDish, opts ...grpc.CallOption) (*DishInfo, error)
	GetDishes(ctx context.Context, in *Pagination, opts ...grpc.CallOption) (*Dishes, error)
	GetDishById(ctx context.Context, in *Id, opts ...grpc.CallOption) (*DishInfo, error)
	DeleteDish(ctx context.Context, in *Id, opts ...grpc.CallOption) (*Void, error)
	ValidateDishId(ctx context.Context, in *Id, opts ...grpc.CallOption) (*Void, error)
	UpdateNutritionInfo(ctx context.Context, in *NutritionInfo, opts ...grpc.CallOption) (*DishInfo, error)
	RecommendDishes(ctx context.Context, in *Filter, opts ...grpc.CallOption) (*Recommendations, error)
}

type dishClient struct {
	cc grpc.ClientConnInterface
}

func NewDishClient(cc grpc.ClientConnInterface) DishClient {
	return &dishClient{cc}
}

func (c *dishClient) CreateDish(ctx context.Context, in *ReqCreateDish, opts ...grpc.CallOption) (*DishInfo, error) {
	out := new(DishInfo)
	err := c.cc.Invoke(ctx, "/dish.Dish/CreateDish", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dishClient) UpdateDish(ctx context.Context, in *ReqUpdateDish, opts ...grpc.CallOption) (*DishInfo, error) {
	out := new(DishInfo)
	err := c.cc.Invoke(ctx, "/dish.Dish/UpdateDish", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dishClient) GetDishes(ctx context.Context, in *Pagination, opts ...grpc.CallOption) (*Dishes, error) {
	out := new(Dishes)
	err := c.cc.Invoke(ctx, "/dish.Dish/GetDishes", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dishClient) GetDishById(ctx context.Context, in *Id, opts ...grpc.CallOption) (*DishInfo, error) {
	out := new(DishInfo)
	err := c.cc.Invoke(ctx, "/dish.Dish/GetDishById", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dishClient) DeleteDish(ctx context.Context, in *Id, opts ...grpc.CallOption) (*Void, error) {
	out := new(Void)
	err := c.cc.Invoke(ctx, "/dish.Dish/DeleteDish", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dishClient) ValidateDishId(ctx context.Context, in *Id, opts ...grpc.CallOption) (*Void, error) {
	out := new(Void)
	err := c.cc.Invoke(ctx, "/dish.Dish/ValidateDishId", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dishClient) UpdateNutritionInfo(ctx context.Context, in *NutritionInfo, opts ...grpc.CallOption) (*DishInfo, error) {
	out := new(DishInfo)
	err := c.cc.Invoke(ctx, "/dish.Dish/UpdateNutritionInfo", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dishClient) RecommendDishes(ctx context.Context, in *Filter, opts ...grpc.CallOption) (*Recommendations, error) {
	out := new(Recommendations)
	err := c.cc.Invoke(ctx, "/dish.Dish/RecommendDishes", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// DishServer is the server API for Dish service.
// All implementations must embed UnimplementedDishServer
// for forward compatibility
type DishServer interface {
	CreateDish(context.Context, *ReqCreateDish) (*DishInfo, error)
	UpdateDish(context.Context, *ReqUpdateDish) (*DishInfo, error)
	GetDishes(context.Context, *Pagination) (*Dishes, error)
	GetDishById(context.Context, *Id) (*DishInfo, error)
	DeleteDish(context.Context, *Id) (*Void, error)
	ValidateDishId(context.Context, *Id) (*Void, error)
	UpdateNutritionInfo(context.Context, *NutritionInfo) (*DishInfo, error)
	RecommendDishes(context.Context, *Filter) (*Recommendations, error)
	mustEmbedUnimplementedDishServer()
}

// UnimplementedDishServer must be embedded to have forward compatible implementations.
type UnimplementedDishServer struct {
}

func (UnimplementedDishServer) CreateDish(context.Context, *ReqCreateDish) (*DishInfo, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateDish not implemented")
}
func (UnimplementedDishServer) UpdateDish(context.Context, *ReqUpdateDish) (*DishInfo, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateDish not implemented")
}
func (UnimplementedDishServer) GetDishes(context.Context, *Pagination) (*Dishes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetDishes not implemented")
}
func (UnimplementedDishServer) GetDishById(context.Context, *Id) (*DishInfo, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetDishById not implemented")
}
func (UnimplementedDishServer) DeleteDish(context.Context, *Id) (*Void, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteDish not implemented")
}
func (UnimplementedDishServer) ValidateDishId(context.Context, *Id) (*Void, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ValidateDishId not implemented")
}
func (UnimplementedDishServer) UpdateNutritionInfo(context.Context, *NutritionInfo) (*DishInfo, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateNutritionInfo not implemented")
}
func (UnimplementedDishServer) RecommendDishes(context.Context, *Filter) (*Recommendations, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RecommendDishes not implemented")
}
func (UnimplementedDishServer) mustEmbedUnimplementedDishServer() {}

// UnsafeDishServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to DishServer will
// result in compilation errors.
type UnsafeDishServer interface {
	mustEmbedUnimplementedDishServer()
}

func RegisterDishServer(s grpc.ServiceRegistrar, srv DishServer) {
	s.RegisterService(&Dish_ServiceDesc, srv)
}

func _Dish_CreateDish_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReqCreateDish)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DishServer).CreateDish(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/dish.Dish/CreateDish",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DishServer).CreateDish(ctx, req.(*ReqCreateDish))
	}
	return interceptor(ctx, in, info, handler)
}

func _Dish_UpdateDish_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReqUpdateDish)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DishServer).UpdateDish(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/dish.Dish/UpdateDish",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DishServer).UpdateDish(ctx, req.(*ReqUpdateDish))
	}
	return interceptor(ctx, in, info, handler)
}

func _Dish_GetDishes_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Pagination)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DishServer).GetDishes(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/dish.Dish/GetDishes",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DishServer).GetDishes(ctx, req.(*Pagination))
	}
	return interceptor(ctx, in, info, handler)
}

func _Dish_GetDishById_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Id)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DishServer).GetDishById(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/dish.Dish/GetDishById",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DishServer).GetDishById(ctx, req.(*Id))
	}
	return interceptor(ctx, in, info, handler)
}

func _Dish_DeleteDish_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Id)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DishServer).DeleteDish(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/dish.Dish/DeleteDish",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DishServer).DeleteDish(ctx, req.(*Id))
	}
	return interceptor(ctx, in, info, handler)
}

func _Dish_ValidateDishId_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Id)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DishServer).ValidateDishId(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/dish.Dish/ValidateDishId",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DishServer).ValidateDishId(ctx, req.(*Id))
	}
	return interceptor(ctx, in, info, handler)
}

func _Dish_UpdateNutritionInfo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(NutritionInfo)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DishServer).UpdateNutritionInfo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/dish.Dish/UpdateNutritionInfo",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DishServer).UpdateNutritionInfo(ctx, req.(*NutritionInfo))
	}
	return interceptor(ctx, in, info, handler)
}

func _Dish_RecommendDishes_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Filter)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DishServer).RecommendDishes(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/dish.Dish/RecommendDishes",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DishServer).RecommendDishes(ctx, req.(*Filter))
	}
	return interceptor(ctx, in, info, handler)
}

// Dish_ServiceDesc is the grpc.ServiceDesc for Dish service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Dish_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "dish.Dish",
	HandlerType: (*DishServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateDish",
			Handler:    _Dish_CreateDish_Handler,
		},
		{
			MethodName: "UpdateDish",
			Handler:    _Dish_UpdateDish_Handler,
		},
		{
			MethodName: "GetDishes",
			Handler:    _Dish_GetDishes_Handler,
		},
		{
			MethodName: "GetDishById",
			Handler:    _Dish_GetDishById_Handler,
		},
		{
			MethodName: "DeleteDish",
			Handler:    _Dish_DeleteDish_Handler,
		},
		{
			MethodName: "ValidateDishId",
			Handler:    _Dish_ValidateDishId_Handler,
		},
		{
			MethodName: "UpdateNutritionInfo",
			Handler:    _Dish_UpdateNutritionInfo_Handler,
		},
		{
			MethodName: "RecommendDishes",
			Handler:    _Dish_RecommendDishes_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "dish.proto",
}
