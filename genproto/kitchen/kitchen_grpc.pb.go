// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.12.4
// source: kitchen.proto

package kitchen

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// KitchenClient is the client API for Kitchen service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type KitchenClient interface {
	CreateKitchen(ctx context.Context, in *ReqCreateKitchen, opts ...grpc.CallOption) (*KitchenInfo, error)
	UpdateKitchen(ctx context.Context, in *ReqUpdateKitchen, opts ...grpc.CallOption) (*KitchenInfo, error)
	GetKitchenById(ctx context.Context, in *Id, opts ...grpc.CallOption) (*KitchenInfo, error)
	GetKitchens(ctx context.Context, in *Pagination, opts ...grpc.CallOption) (*Kitchens, error)
	SearchKitchens(ctx context.Context, in *Search, opts ...grpc.CallOption) (*Kitchens, error)
	DeleteKitchen(ctx context.Context, in *Id, opts ...grpc.CallOption) (*Void, error)
	ValidateKitchenId(ctx context.Context, in *Id, opts ...grpc.CallOption) (*Void, error)
}

type kitchenClient struct {
	cc grpc.ClientConnInterface
}

func NewKitchenClient(cc grpc.ClientConnInterface) KitchenClient {
	return &kitchenClient{cc}
}

func (c *kitchenClient) CreateKitchen(ctx context.Context, in *ReqCreateKitchen, opts ...grpc.CallOption) (*KitchenInfo, error) {
	out := new(KitchenInfo)
	err := c.cc.Invoke(ctx, "/kitchen.Kitchen/CreateKitchen", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *kitchenClient) UpdateKitchen(ctx context.Context, in *ReqUpdateKitchen, opts ...grpc.CallOption) (*KitchenInfo, error) {
	out := new(KitchenInfo)
	err := c.cc.Invoke(ctx, "/kitchen.Kitchen/UpdateKitchen", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *kitchenClient) GetKitchenById(ctx context.Context, in *Id, opts ...grpc.CallOption) (*KitchenInfo, error) {
	out := new(KitchenInfo)
	err := c.cc.Invoke(ctx, "/kitchen.Kitchen/GetKitchenById", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *kitchenClient) GetKitchens(ctx context.Context, in *Pagination, opts ...grpc.CallOption) (*Kitchens, error) {
	out := new(Kitchens)
	err := c.cc.Invoke(ctx, "/kitchen.Kitchen/GetKitchens", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *kitchenClient) SearchKitchens(ctx context.Context, in *Search, opts ...grpc.CallOption) (*Kitchens, error) {
	out := new(Kitchens)
	err := c.cc.Invoke(ctx, "/kitchen.Kitchen/SearchKitchens", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *kitchenClient) DeleteKitchen(ctx context.Context, in *Id, opts ...grpc.CallOption) (*Void, error) {
	out := new(Void)
	err := c.cc.Invoke(ctx, "/kitchen.Kitchen/DeleteKitchen", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *kitchenClient) ValidateKitchenId(ctx context.Context, in *Id, opts ...grpc.CallOption) (*Void, error) {
	out := new(Void)
	err := c.cc.Invoke(ctx, "/kitchen.Kitchen/ValidateKitchenId", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// KitchenServer is the server API for Kitchen service.
// All implementations must embed UnimplementedKitchenServer
// for forward compatibility
type KitchenServer interface {
	CreateKitchen(context.Context, *ReqCreateKitchen) (*KitchenInfo, error)
	UpdateKitchen(context.Context, *ReqUpdateKitchen) (*KitchenInfo, error)
	GetKitchenById(context.Context, *Id) (*KitchenInfo, error)
	GetKitchens(context.Context, *Pagination) (*Kitchens, error)
	SearchKitchens(context.Context, *Search) (*Kitchens, error)
	DeleteKitchen(context.Context, *Id) (*Void, error)
	ValidateKitchenId(context.Context, *Id) (*Void, error)
	mustEmbedUnimplementedKitchenServer()
}

// UnimplementedKitchenServer must be embedded to have forward compatible implementations.
type UnimplementedKitchenServer struct {
}

func (UnimplementedKitchenServer) CreateKitchen(context.Context, *ReqCreateKitchen) (*KitchenInfo, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateKitchen not implemented")
}
func (UnimplementedKitchenServer) UpdateKitchen(context.Context, *ReqUpdateKitchen) (*KitchenInfo, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateKitchen not implemented")
}
func (UnimplementedKitchenServer) GetKitchenById(context.Context, *Id) (*KitchenInfo, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetKitchenById not implemented")
}
func (UnimplementedKitchenServer) GetKitchens(context.Context, *Pagination) (*Kitchens, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetKitchens not implemented")
}
func (UnimplementedKitchenServer) SearchKitchens(context.Context, *Search) (*Kitchens, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SearchKitchens not implemented")
}
func (UnimplementedKitchenServer) DeleteKitchen(context.Context, *Id) (*Void, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteKitchen not implemented")
}
func (UnimplementedKitchenServer) ValidateKitchenId(context.Context, *Id) (*Void, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ValidateKitchenId not implemented")
}
func (UnimplementedKitchenServer) mustEmbedUnimplementedKitchenServer() {}

// UnsafeKitchenServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to KitchenServer will
// result in compilation errors.
type UnsafeKitchenServer interface {
	mustEmbedUnimplementedKitchenServer()
}

func RegisterKitchenServer(s grpc.ServiceRegistrar, srv KitchenServer) {
	s.RegisterService(&Kitchen_ServiceDesc, srv)
}

func _Kitchen_CreateKitchen_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReqCreateKitchen)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(KitchenServer).CreateKitchen(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/kitchen.Kitchen/CreateKitchen",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(KitchenServer).CreateKitchen(ctx, req.(*ReqCreateKitchen))
	}
	return interceptor(ctx, in, info, handler)
}

func _Kitchen_UpdateKitchen_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReqUpdateKitchen)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(KitchenServer).UpdateKitchen(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/kitchen.Kitchen/UpdateKitchen",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(KitchenServer).UpdateKitchen(ctx, req.(*ReqUpdateKitchen))
	}
	return interceptor(ctx, in, info, handler)
}

func _Kitchen_GetKitchenById_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Id)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(KitchenServer).GetKitchenById(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/kitchen.Kitchen/GetKitchenById",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(KitchenServer).GetKitchenById(ctx, req.(*Id))
	}
	return interceptor(ctx, in, info, handler)
}

func _Kitchen_GetKitchens_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Pagination)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(KitchenServer).GetKitchens(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/kitchen.Kitchen/GetKitchens",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(KitchenServer).GetKitchens(ctx, req.(*Pagination))
	}
	return interceptor(ctx, in, info, handler)
}

func _Kitchen_SearchKitchens_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Search)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(KitchenServer).SearchKitchens(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/kitchen.Kitchen/SearchKitchens",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(KitchenServer).SearchKitchens(ctx, req.(*Search))
	}
	return interceptor(ctx, in, info, handler)
}

func _Kitchen_DeleteKitchen_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Id)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(KitchenServer).DeleteKitchen(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/kitchen.Kitchen/DeleteKitchen",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(KitchenServer).DeleteKitchen(ctx, req.(*Id))
	}
	return interceptor(ctx, in, info, handler)
}

func _Kitchen_ValidateKitchenId_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Id)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(KitchenServer).ValidateKitchenId(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/kitchen.Kitchen/ValidateKitchenId",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(KitchenServer).ValidateKitchenId(ctx, req.(*Id))
	}
	return interceptor(ctx, in, info, handler)
}

// Kitchen_ServiceDesc is the grpc.ServiceDesc for Kitchen service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Kitchen_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "kitchen.Kitchen",
	HandlerType: (*KitchenServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateKitchen",
			Handler:    _Kitchen_CreateKitchen_Handler,
		},
		{
			MethodName: "UpdateKitchen",
			Handler:    _Kitchen_UpdateKitchen_Handler,
		},
		{
			MethodName: "GetKitchenById",
			Handler:    _Kitchen_GetKitchenById_Handler,
		},
		{
			MethodName: "GetKitchens",
			Handler:    _Kitchen_GetKitchens_Handler,
		},
		{
			MethodName: "SearchKitchens",
			Handler:    _Kitchen_SearchKitchens_Handler,
		},
		{
			MethodName: "DeleteKitchen",
			Handler:    _Kitchen_DeleteKitchen_Handler,
		},
		{
			MethodName: "ValidateKitchenId",
			Handler:    _Kitchen_ValidateKitchenId_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "kitchen.proto",
}
