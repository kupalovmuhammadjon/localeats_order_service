// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.12.4
// source: order.proto

package order

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// OrderClient is the client API for Order service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type OrderClient interface {
	CreateOrder(ctx context.Context, in *ReqCreateOrder, opts ...grpc.CallOption) (*OrderInfo, error)
	UpdateOrderStatus(ctx context.Context, in *Status, opts ...grpc.CallOption) (*StatusRes, error)
	GetOrderById(ctx context.Context, in *Id, opts ...grpc.CallOption) (*OrderInfo, error)
	GetOrdersForUser(ctx context.Context, in *Id, opts ...grpc.CallOption) (*Orders, error)
	GetOrdersForChef(ctx context.Context, in *Id, opts ...grpc.CallOption) (*Orders, error)
	DeleteOrder(ctx context.Context, in *Id, opts ...grpc.CallOption) (*Void, error)
	ValidateOrderId(ctx context.Context, in *Id, opts ...grpc.CallOption) (*Void, error)
	RecommendDishes(ctx context.Context, in *Filter, opts ...grpc.CallOption) (*Recommendations, error)
	GetKitchenStatistics(ctx context.Context, in *DateFilter, opts ...grpc.CallOption) (*KitchenStatistics, error)
	GetUserStatistics(ctx context.Context, in *DateFilter, opts ...grpc.CallOption) (*UserStatistics, error)
	ManageWorkingHours(ctx context.Context, in *Id, opts ...grpc.CallOption) (*WorkingHours, error)
}

type orderClient struct {
	cc grpc.ClientConnInterface
}

func NewOrderClient(cc grpc.ClientConnInterface) OrderClient {
	return &orderClient{cc}
}

func (c *orderClient) CreateOrder(ctx context.Context, in *ReqCreateOrder, opts ...grpc.CallOption) (*OrderInfo, error) {
	out := new(OrderInfo)
	err := c.cc.Invoke(ctx, "/order.Order/CreateOrder", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *orderClient) UpdateOrderStatus(ctx context.Context, in *Status, opts ...grpc.CallOption) (*StatusRes, error) {
	out := new(StatusRes)
	err := c.cc.Invoke(ctx, "/order.Order/UpdateOrderStatus", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *orderClient) GetOrderById(ctx context.Context, in *Id, opts ...grpc.CallOption) (*OrderInfo, error) {
	out := new(OrderInfo)
	err := c.cc.Invoke(ctx, "/order.Order/GetOrderById", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *orderClient) GetOrdersForUser(ctx context.Context, in *Id, opts ...grpc.CallOption) (*Orders, error) {
	out := new(Orders)
	err := c.cc.Invoke(ctx, "/order.Order/GetOrdersForUser", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *orderClient) GetOrdersForChef(ctx context.Context, in *Id, opts ...grpc.CallOption) (*Orders, error) {
	out := new(Orders)
	err := c.cc.Invoke(ctx, "/order.Order/GetOrdersForChef", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *orderClient) DeleteOrder(ctx context.Context, in *Id, opts ...grpc.CallOption) (*Void, error) {
	out := new(Void)
	err := c.cc.Invoke(ctx, "/order.Order/DeleteOrder", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *orderClient) ValidateOrderId(ctx context.Context, in *Id, opts ...grpc.CallOption) (*Void, error) {
	out := new(Void)
	err := c.cc.Invoke(ctx, "/order.Order/ValidateOrderId", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *orderClient) RecommendDishes(ctx context.Context, in *Filter, opts ...grpc.CallOption) (*Recommendations, error) {
	out := new(Recommendations)
	err := c.cc.Invoke(ctx, "/order.Order/RecommendDishes", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *orderClient) GetKitchenStatistics(ctx context.Context, in *DateFilter, opts ...grpc.CallOption) (*KitchenStatistics, error) {
	out := new(KitchenStatistics)
	err := c.cc.Invoke(ctx, "/order.Order/GetKitchenStatistics", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *orderClient) GetUserStatistics(ctx context.Context, in *DateFilter, opts ...grpc.CallOption) (*UserStatistics, error) {
	out := new(UserStatistics)
	err := c.cc.Invoke(ctx, "/order.Order/GetUserStatistics", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *orderClient) ManageWorkingHours(ctx context.Context, in *Id, opts ...grpc.CallOption) (*WorkingHours, error) {
	out := new(WorkingHours)
	err := c.cc.Invoke(ctx, "/order.Order/ManageWorkingHours", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// OrderServer is the server API for Order service.
// All implementations must embed UnimplementedOrderServer
// for forward compatibility
type OrderServer interface {
	CreateOrder(context.Context, *ReqCreateOrder) (*OrderInfo, error)
	UpdateOrderStatus(context.Context, *Status) (*StatusRes, error)
	GetOrderById(context.Context, *Id) (*OrderInfo, error)
	GetOrdersForUser(context.Context, *Id) (*Orders, error)
	GetOrdersForChef(context.Context, *Id) (*Orders, error)
	DeleteOrder(context.Context, *Id) (*Void, error)
	ValidateOrderId(context.Context, *Id) (*Void, error)
	RecommendDishes(context.Context, *Filter) (*Recommendations, error)
	GetKitchenStatistics(context.Context, *DateFilter) (*KitchenStatistics, error)
	GetUserStatistics(context.Context, *DateFilter) (*UserStatistics, error)
	ManageWorkingHours(context.Context, *Id) (*WorkingHours, error)
	mustEmbedUnimplementedOrderServer()
}

// UnimplementedOrderServer must be embedded to have forward compatible implementations.
type UnimplementedOrderServer struct {
}

func (UnimplementedOrderServer) CreateOrder(context.Context, *ReqCreateOrder) (*OrderInfo, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateOrder not implemented")
}
func (UnimplementedOrderServer) UpdateOrderStatus(context.Context, *Status) (*StatusRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateOrderStatus not implemented")
}
func (UnimplementedOrderServer) GetOrderById(context.Context, *Id) (*OrderInfo, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetOrderById not implemented")
}
func (UnimplementedOrderServer) GetOrdersForUser(context.Context, *Id) (*Orders, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetOrdersForUser not implemented")
}
func (UnimplementedOrderServer) GetOrdersForChef(context.Context, *Id) (*Orders, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetOrdersForChef not implemented")
}
func (UnimplementedOrderServer) DeleteOrder(context.Context, *Id) (*Void, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteOrder not implemented")
}
func (UnimplementedOrderServer) ValidateOrderId(context.Context, *Id) (*Void, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ValidateOrderId not implemented")
}
func (UnimplementedOrderServer) RecommendDishes(context.Context, *Filter) (*Recommendations, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RecommendDishes not implemented")
}
func (UnimplementedOrderServer) GetKitchenStatistics(context.Context, *DateFilter) (*KitchenStatistics, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetKitchenStatistics not implemented")
}
func (UnimplementedOrderServer) GetUserStatistics(context.Context, *DateFilter) (*UserStatistics, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetUserStatistics not implemented")
}
func (UnimplementedOrderServer) ManageWorkingHours(context.Context, *Id) (*WorkingHours, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ManageWorkingHours not implemented")
}
func (UnimplementedOrderServer) mustEmbedUnimplementedOrderServer() {}

// UnsafeOrderServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to OrderServer will
// result in compilation errors.
type UnsafeOrderServer interface {
	mustEmbedUnimplementedOrderServer()
}

func RegisterOrderServer(s grpc.ServiceRegistrar, srv OrderServer) {
	s.RegisterService(&Order_ServiceDesc, srv)
}

func _Order_CreateOrder_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReqCreateOrder)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OrderServer).CreateOrder(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/order.Order/CreateOrder",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OrderServer).CreateOrder(ctx, req.(*ReqCreateOrder))
	}
	return interceptor(ctx, in, info, handler)
}

func _Order_UpdateOrderStatus_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Status)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OrderServer).UpdateOrderStatus(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/order.Order/UpdateOrderStatus",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OrderServer).UpdateOrderStatus(ctx, req.(*Status))
	}
	return interceptor(ctx, in, info, handler)
}

func _Order_GetOrderById_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Id)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OrderServer).GetOrderById(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/order.Order/GetOrderById",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OrderServer).GetOrderById(ctx, req.(*Id))
	}
	return interceptor(ctx, in, info, handler)
}

func _Order_GetOrdersForUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Id)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OrderServer).GetOrdersForUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/order.Order/GetOrdersForUser",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OrderServer).GetOrdersForUser(ctx, req.(*Id))
	}
	return interceptor(ctx, in, info, handler)
}

func _Order_GetOrdersForChef_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Id)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OrderServer).GetOrdersForChef(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/order.Order/GetOrdersForChef",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OrderServer).GetOrdersForChef(ctx, req.(*Id))
	}
	return interceptor(ctx, in, info, handler)
}

func _Order_DeleteOrder_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Id)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OrderServer).DeleteOrder(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/order.Order/DeleteOrder",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OrderServer).DeleteOrder(ctx, req.(*Id))
	}
	return interceptor(ctx, in, info, handler)
}

func _Order_ValidateOrderId_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Id)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OrderServer).ValidateOrderId(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/order.Order/ValidateOrderId",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OrderServer).ValidateOrderId(ctx, req.(*Id))
	}
	return interceptor(ctx, in, info, handler)
}

func _Order_RecommendDishes_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Filter)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OrderServer).RecommendDishes(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/order.Order/RecommendDishes",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OrderServer).RecommendDishes(ctx, req.(*Filter))
	}
	return interceptor(ctx, in, info, handler)
}

func _Order_GetKitchenStatistics_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DateFilter)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OrderServer).GetKitchenStatistics(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/order.Order/GetKitchenStatistics",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OrderServer).GetKitchenStatistics(ctx, req.(*DateFilter))
	}
	return interceptor(ctx, in, info, handler)
}

func _Order_GetUserStatistics_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DateFilter)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OrderServer).GetUserStatistics(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/order.Order/GetUserStatistics",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OrderServer).GetUserStatistics(ctx, req.(*DateFilter))
	}
	return interceptor(ctx, in, info, handler)
}

func _Order_ManageWorkingHours_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Id)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OrderServer).ManageWorkingHours(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/order.Order/ManageWorkingHours",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OrderServer).ManageWorkingHours(ctx, req.(*Id))
	}
	return interceptor(ctx, in, info, handler)
}

// Order_ServiceDesc is the grpc.ServiceDesc for Order service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Order_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "order.Order",
	HandlerType: (*OrderServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateOrder",
			Handler:    _Order_CreateOrder_Handler,
		},
		{
			MethodName: "UpdateOrderStatus",
			Handler:    _Order_UpdateOrderStatus_Handler,
		},
		{
			MethodName: "GetOrderById",
			Handler:    _Order_GetOrderById_Handler,
		},
		{
			MethodName: "GetOrdersForUser",
			Handler:    _Order_GetOrdersForUser_Handler,
		},
		{
			MethodName: "GetOrdersForChef",
			Handler:    _Order_GetOrdersForChef_Handler,
		},
		{
			MethodName: "DeleteOrder",
			Handler:    _Order_DeleteOrder_Handler,
		},
		{
			MethodName: "ValidateOrderId",
			Handler:    _Order_ValidateOrderId_Handler,
		},
		{
			MethodName: "RecommendDishes",
			Handler:    _Order_RecommendDishes_Handler,
		},
		{
			MethodName: "GetKitchenStatistics",
			Handler:    _Order_GetKitchenStatistics_Handler,
		},
		{
			MethodName: "GetUserStatistics",
			Handler:    _Order_GetUserStatistics_Handler,
		},
		{
			MethodName: "ManageWorkingHours",
			Handler:    _Order_ManageWorkingHours_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "order.proto",
}
